<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Graham Wheeler">
   <meta name="GENERATOR" content="Mozilla/4.75 [en] (Win95; U) [Netscape]">
   <title>manual</title>
</head>
<body>

<center><b><font size=+3>WordFind++/WordFindPro</font></b>
<br><font size=+2>by Graham Wheeler</font>
<br><i>gram@bradygirl.com</i>
<br><i>http://www.bradygirl.com/WordFind/</i></center>

<p><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<p><b><font size=+2>0. Release Information</font></b>
<p>This document describes WordFind++ and WordFindPro v2.7.
<br>&nbsp;
<p><b><font size=+2>1. Introduction</font></b>
<p>WordFind++ and WordFindPro are powerful dictionary searching programs
for use with word games like Scrabble, Target, crosswords, and codewords/cryptograms.
You can use them to generate lists of anagrams and words, given a set of
constraints on the available letters and their positions.
<p>WordFindPro has all of the functionality of WordFind++, plus the ability
to have multiple dictionaries resident at the same time, and switch between
them freely. WordFindPro also includes a Win32 dictionary maintenance program
(FreeBSD or Linux executables available to registered users upon request).
In addition, WordFindPro supports UNIX regular-expression style searches
(single word only), and supports the use of numeric placeholders for letters,
which can be used when solving cryptograms and substitution ciphers.
<p>There is a WordFindLite program available which has the basic functionality
of WordFind++ but with a much simplified user interface. If all you wish
to do is use these programs for finding anagrams and finding words that
fit in partially completed crossword grids you may prefer the simplicity
of WordFindLite. However, WordFindLite will not have new features added
in the future, so it is worth taking the time to learn to use WordFind++
or WordFindPro.
<p>To use WordFind++, you must also install one of the dictionary databases
it comes with for it to search. To use WordFindPro, you must install <i>at
least </i>one of the dictionary databases it comes with; you can also install
more than one and choose between them before starting a search.
<p>The currently available dictionaries are:
<p><b>demo.pdb</b> - the dictionary that comes with the trial versions
of WordFind++ and WordFindPro, this has 30,240 words, of up to 9 letters
in length.
<p><b>ospd3.pdb</b> - for Scrabble players, this dictionary is made from
the OSPD3 word list of&nbsp; 116,887 words of up to 13 characters in length..
<p><b>small.pdb</b> - a crossword dictionary of 52,033 common words.
<p><b>medium.pdb</b> - a medium sized crossword dictionary of 133,426 words.
<p><b>large.pdb</b> - this large crossword dictionary has 229,428 words.
<p><b>huge.pdb</b> - this very large dictionary has 345,195 entries (WordFindPro
only).
<p><b>scrabtor.pdb</b> - a Scrabble tournament dictionary of 173,866 words
(WordFindPro only)
<p>The trial versions may be used with the <b>demo.pdb</b> dictionary only.
Unauthorised redistribution of the other dictionary database files is not
permitted. Registered users can obtain additional dictionaries, including
foreign language dictionaries, from the&nbsp; <a href="http://www.bradygirl.com/WordFind/">WordFind
website</a> .
<p>In the rest of this document, we will refer to WordFind most of the
time - this applies to both WordFind++ and WordFindPro. We refer to WordFindPro
only when discussing the additional features of WordFindPro.
<br>&nbsp;
<p><b><font size=+2>2. Quick Start</font></b>
<p>Section 3 provides a detailed description of how to use the programs.
This section provides a quick introduction which will allow you to do the
most common types of searches.
<p><b><font size=+1>General Crossword Help</font></b>
<p>For help with a crossword word, where only some letters are known:
<ul>
<li>
if the prompt at the top left of the screen says "Template:", tap on it
until it says "GlobPat:" (this is the GlobPat form).</li>

<li>
enter the word or words in the text field. For positions where the letter
is unknown, press the "Any" button, which will insert a "?" character at
that position.</li>

<li>
enter a newline in the graffiti area or tap on the "Go!" button to start
the search</li>
</ul>
For example, if you have a 10 letter word that starts with "TE", has a
"V" in the fifth position, and ends with "N", you would enter "TE??V????N".
<p>If you wish to do this with multi-word clues, tap on the top-left prompt
until it says "Template:" (this is the Template Form). Make sure that there
is a button on the screen that says "Anchored"; if not, tap on the button
that says "Floating" and it will change to "Anchored". Then proceed as
before, using the "|" character to separate the words. Note that in this
screen, tapping the "Any" button will insert a ":" character. The reason
for this will become clear later.
<p>For example, if you have a four letter clue with word lengths 2,4,2,4
and you know the first letter of each word are A, G, A and G respectively,
you would enter the pattern "A:|G:::|A:|G:::".
<p>(In this case, the cryptic clue is "Behaviour deserving top trophy",
and the answer is "As good as gold").
<p>You can also use the Template Form instead of the GlobPat form to do
single word matches; the GlobPat form is just simpler.
<p><b><font size=+1>Finding Anagrams</font></b>
<p>The procedure for finding anagrams is identical to the procedure for
multi-word crossword clues, except that you should&nbsp; ensure that the
button at the bottom right of the Template Form is set to "Floating" instead
of "Anchored" before you enter the word(s) that you want to find anagrams
of.
<p>For multi-word anagrams, check the Multi checkbox before starting the
search (if the word breaks can occur anywhere) or use the "|" character
as before to mark specific positions as word breaks (as in a crossword
anagram clue). For example, if you had a crossword clue "Wicked television
arrangement (4,3,3)" which you guessed was an anagram of "television",
you could enter "tele|vis|ion" to find all possible matches. (The answer,
in this case, is "evil ion set").
<p><b><font size=+1>Regular Expression Searches (WordFindPro Only)</font></b>
<p>If you are familiar with UNIX regular expressions, you may want to use
them to do searches. To do this, tap on the "Template:" prompt on the Template
Form, or the "GlobPat:" prompt in the GlobPat form, until the prompt changes
to "RegExp:" - this is the RegExp form. Enter a regular expression and
tap on the Go! button. In brief, the regular expressions support the *,
+ and ? operators, the . wild character, the ^ and $ start- and end-of-word
markers, and character ranges. Grouping with parentheses is not supported
as yet, nor is the choice operator |.
<p><b><font size=+1>What's Missing in this Quick Start</font></b>
<p>Anagram hunting and crossword clue assistance are the most common uses
of WordFind, and you don't need to know much more than this to get lots
of benefit from the program. However, WordFind supports far more complicated
types of searching than this, including the ability to search for words
with known prefixes and suffixes (such as words beginning with `post'-
or words ending in `-tion'), and the ability to use numeric placeholders
(variables) to specify letters; this is useful in the type of crossword
known as a codeword, where each square is labeled with a number from 1
through 26 corresponding to a letter, and no clues are given. If you need
this sort of functionality, you should read and understand the next section.
<br>&nbsp;
<p><b><font size=+2>3. Detailed Description</font></b>
<p>WordFind supports three different types of search - templates, glob
patterns, and regular expressions (WordFindPro only). Of these, glob patterns
are the simplest to use and understand. Regular expressions are more powerful
patterns (every glob pattern can be easily rewritten as a regular expression,
but the opposite is not true). but most people will never need the more
powerful regular expressions. Both glob patterns and regular expressions
are used for matching letters in-order, and are not much use for finding
anagrams. WordFind's template searches come into play for this purpose,
and provide an additional powerful set of search capabilities, applicable
not only to anagrams, but to many other word puzzle needs, including Scrabble
problems, substitution ciphers, and others.
<p><b><font size=+1>3.1 Glob Pattern Searches</font></b>
<p>Glob patterns are similar to the patterns used in MS-DOS and UNIX command
interpreters for matching filenames. If you have ever issued a DOS command
such as "dir *.exe" or UNIX command such as "ls *.c" you will have some
idea of how to use these patterns.
<p>A glob pattern consists of a sequence of characters or character ranges,
that must match the desired words. In addition, the "?" character can be
used to represent any single character, while the "*" character can be
used to represent any sequence of characters. So, for example, to find
all words that start with "T" and end with "N" you would use the pattern
"T*N". To limit this to four-letter words you would use "T??N". To find
all such words that also contain the sequence "VI" in the middle you would
use "T*VI*N" (if you have used the Franklin word finder you should be familiar
with these patterns).
<p>Patterns can also have `character ranges' enclosed in brackets, such
as `[A-Z]' (any letter), `[AEIOU]' (any one vowel) or `[A-MZ]' (any one
of A through M, or Z). To specify the opposite of a range, start the range
with a caret. For example, [^AEIOU] matches any non-vowel. Thus, if we
wanted to find all words that have at least three consecutive vowels, we
could use "*[AEIOU][AEIOU][AEIOU]*".
<p>There are shortcut buttons in the various forms for entering the left
and right brackets, minus sign, and caret for negating character ranges,
as well as the "?" character and the "*" character (in the GlobPat form
the button for "*" is labelled "Any"). Section 4 describes the user interface
of WordFind in some detail.
<p><b><font size=+1>3.2 Regular Expression Searches (WordFindPro Only)</font></b>
<p>WordFindPro also supports UNIX-style regular expression searches of
the dictionary. The regular expressions that are supported are quite basic.
Only single word matches are allowed. As in most regular expression languages,
character ranges are supported. Ranges can be negated by starting them
with the "^" character; thus "[^aeiou]" represents a consonant. A period
is used for "any character", which is equivalent to "[a-z]" (note that
this is different to glob patterns, where "?" is used for any single character
- in regular expressions "?" has a different meaning). To force a match
from the start of the word, start the regular expression with a "^"; to
force a match to the end of the word, terminate the regular expression
with a "$" character. Unless you start a regular expression with "^" and
end it with "$", the regular expression only needs to match a <i>substring</i>
of a word. This is in contrast to glob patterns, where the glob pattern
is always matched against the entire word.
<p>Three operators are supported: a "?" means the preceding character or
character range is optional ("zero or one of"). A "+" means there must
be at least one of the preceding character or range, but there may be more
than one. A "*" means there may be any number of the preceding character
or range, including zero (none).
<p>Some examples should help to illustrate this.
<blockquote>"^ab...ion$" matches eight-letter words starting with "ab"
and ending with "ion".
<p>"^ab.*ion$" matches all words that start with "ab" and end with "ion".
<p>"^ab.+ion" matches words of at least six characters that start with
"ab" and end with "ion"
<p>"^ab.*ion" matches words that start with "ab" and contain the sequence
"ion"
<p>"ion" matches words that contain the sequence "ion"
<p>"a.*a.*a.*a" matches words that contain at least four instances of the
letter "a"
<p>"^[aeiou]" matches words that start with a vowel
<p>"[aeiou][aeiou][aeiou]" matches words that have at least three vowels
in a consecutive sequence
<p>"io?n" matches words that contain either "ion" or "in"</blockquote>
All of the special characters have shortcut buttons in the form to speed
up regular expression entry. WordFindPro does not yet support the grouping
of subexpressions with parentheses, although this capability may be added
later; similarly, the choice operator "|" is not yet supported but may
be later.
<p>I mentioned earlier that any glob pattern can be converted to a regular
expression. It should be clear now how this is done: each "?" character
in the glob pattern should be changed to a ".", each "*" character should
get changed to a ".*", and the glob pattern should have a "^" prepended
and a "$" appended. Although glob patterns can be converted to regular
expressions, WordFind does not do this internally, but has separate matching
algorithms for each, as glob pattern matching is simpler and can be done
more efficiently than matching the equivalent regular expression.
<br>&nbsp;
<p><b><font size=+1>3.3 Template Pattern Searches</font></b>
<p>The final type of search pattern supported by WordFind is the template
search pattern. This is the original method; regular expressions were only
added in v2.4 and glob patterns in v2.5. Template patterns are powerful,
but have one major limitation, which is that they do not support any concept
of a sequence (i.e like a "*" character in a glob pattern or a "*" operator
in a regular expression). On the other hand, glob patterns and regular
expressions expect characters to be matched in order, which makes them
unsuitable for anagram searches. Template patterns do not have this restriction,
so there are many types of searches that are only possible using template
patterns.
<p>The method used by WordFind for template pattern searching&nbsp; is
fairly complex but worth understanding if you want to make full use of
it. Underlying each search are two pieces of information:
<ul>
<li>
&nbsp;a position template which specifies which letters are allowed in
which positions in matching words.</li>

<li>
a letter pool, which specifies which letters or letter ranges are available
for use in positionally unconstrained entries in the template.</li>
</ul>
A few examples can be used to illustrate the idea:
<ul>
<li>
for the literal word ROPE the template is "ROPE" and the&nbsp; letter pool
is empty;</li>

<li>
for anagrams of ROPE the&nbsp; template is unconstrained (we&nbsp; will
write this as "####") and the letter pool consists&nbsp; of the letters
R, O, P and E;</li>

<li>
for anagrams of ROPE that begin with R and have P in the third place the
template is "R#P#" and the letter pool consists of an O and an E.</li>
</ul>
Given a template and a letter pool, WordFind tries to find matches by plugging
different letters from the letter pool into different positions in the
template.
<p><font size=+1>3.3.1 Match Types</font>
<p>In the Template form, you can choose what type of match to use. There
are three possibilities, and each possibility can also be used in either
single word or multi-word mode:
<ul>
<li>
Use all letters - matches must match the whole word template and use all
the letters from the pool;</li>

<li>
Match prefixes - matches may match any leading subsection of the template;</li>

<li>
Match suffixes - matches may match any trailing subsection of the&nbsp;
template;</li>
</ul>
The prefix and suffix matches can be illustrated by continuing with our
last example. That is, we have template "R#P#" and letter pool "O,E". Using
prefix matching, WordFind++ would find words that match any of the following
situations:
<br>&nbsp;
<table BORDER COLS=2 WIDTH="50%" >
<tr>
<td>
<center><b>TEMPLATE</b></center>
</td>

<td>
<center><b>LETTER POOL</b></center>
</td>
</tr>

<tr>
<td>
<center>R</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>R#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>R#P</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>R#P#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>
</table>

<p>That is, the letter pool is unchanged, but the templates consist of
all the possible subtemplates that are prefixes of the specified template.
Using suffix matching, WordFind++ would instead find matches of:
<br>&nbsp;
<table BORDER COLS=2 WIDTH="50%" >
<tr>
<td>
<center><b>&nbsp;TEMPLATE</b></center>
</td>

<td>
<center><b>LETTTER POOL</b></center>
</td>
</tr>

<tr>
<td>
<center>#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>P#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>#P#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>R#P#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>
</table>

<p>Again, the latter pool is unchanged, but the templates consist of all
the subtemplates that are suffixes of the specified template. Thus with
prefix matching, WordFind++ will see if any of the following are valid
words:
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R&nbsp;&nbsp;&nbsp; RO&nbsp;&nbsp; RE&nbsp;&nbsp;
ROP&nbsp;&nbsp; REP&nbsp;&nbsp; ROPE&nbsp;&nbsp; REPO
<p>while with suffix matching, it will check:
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; O&nbsp;&nbsp;&nbsp; E&nbsp;&nbsp;&nbsp;
PO&nbsp;&nbsp; PE&nbsp;&nbsp;&nbsp; OPE&nbsp;&nbsp; EPO&nbsp;&nbsp;&nbsp;
ROPE&nbsp;&nbsp;&nbsp; REPO
<p>(Actually, this is not strictly true. Because the letter pool can contain
letter ranges as well as specific letters, if WordFind were to consider
every possible permutation, some searches would take infinitely long (effectively,
anyway), due to the exponential explosion in the number of possible arrangements.
Instead, WordFind walks through the dictionary, and checks which words
in the dictionary can correspond to the template and letter pool. This
can make some searches much slower, but does mean that there is a finite
and not too large number of matches that must be done, and thus it is guaranteed
to find all matches within a "reasonable" amount of time. Of course, this
is mainly true for single words - once you start searching for multi-word
matches there is once again an explosion of possibilities, that even an
efficient algorithm can choke on. Fortunately, if a search is taking too
long for your liking, you can abort it at any time by pressing the Stop
button in the Word form).
<p>Note that in the case that the template is unconstrained (that is, all
#'s), then prefix and suffix matching are identical, both having the meaning
"words consisting of one or more letters from the pool". In other words,
words that are made from a subset of the specified set of letters. This
type of search can be very useful for Scrabble players, to find all the
words you can make from a given set of tiles.
<p>If you didn't understand the last paragraph, reread the whole last section.
<p><font size=+1>3.3.2 Specifying Search Patterns</font>
<p>When making consultations, you don't explicitly specify the template
and letter pool as two separate pieces of information. Rather, you specify
a single pattern, which WordFind can split into a template and pool.
<p>In the simplest case a pattern is a sequence of letters (whitespace
may be present but is ignored). The letters may be either upper case or
lower case, the former meaning that the letter must occur in that position
(i.e. the letter&nbsp; is a template constraint), while lower case means
the letter need not be in that position (i.e. it is a letter in the letter
pool). Thus our example above could be specified as "RoPe", or equivalently
as "RePo".
<p>A few more examples should help here. It should be clear by now that
the order of letters in the template is fixed and significant, while the
order of letters in the pool is arbitrary.
<br>&nbsp;
<table BORDER COLS=3 WIDTH="59%" >
<tr>
<td>
<center><b>PATTERN</b></center>
</td>

<td>
<center><b>TEMPLATE</b></center>
</td>

<td>
<center><b>LETTER POOL</b></center>
</td>
</tr>

<tr>
<td>
<center>informatION</center>
</td>

<td>
<center>#######ION</center>
</td>

<td>
<center>informat</center>
</td>
</tr>

<tr>
<td>
<center>MISinformed</center>
</td>

<td>
<center>MIS########</center>
</td>

<td>
<center>informed</center>
</td>
</tr>

<tr>
<td>
<center>TreateD</center>
</td>

<td>
<center>T#####D</center>
</td>

<td>
<center>reate</center>
</td>
</tr>

<tr>
<td>
<center>T.....D</center>
</td>

<td>
<center>T#####D</center>
</td>

<td>
<center>any 5 letters</center>
</td>
</tr>

<tr>
<td>
<center>T:::::D</center>
</td>

<td>
<center>T-----D</center>
</td>

<td>
<center>empty</center>
</td>
</tr>
</table>

<p>The first two are typical examples of patterns that would be used for
suffix and prefix matching, respectively. The third is typical of a crossword
situation where the first and last letters are known, and it is suspected
that the word is an anagram of `treated'. The last two cases are a similar
crossword lookup, with two known letters only (see below for a further
explanation of these last two patterns).
<p>Elements in the pattern that correspond to elements in the template
are called "anchored", while elements in the pattern that go in the letter
pool are called "floating".&nbsp; During pattern input WordFind is either
in "floating" mode (in which case letters are entered in lower case by
default) or "anchored" mode (in which case letters are entered in upper
case by default). A button in the Template Form toggles between these two
modes.
<i>Note that the button only affects the default letter case of
subsequently entered letters; it does NOT affect the actual search. If
a letter appears in upper case in the pattern it is anchored, irrespective
of the current setting of the input mode button, and similarly for lower
case floating characters.</i>
<p><b>Letter Ranges</b>
<p>Template patterns support character ranges just like glob patterns and
regular expressions. However, unlike in those cases, in template patterns
the letter case is significant, and tells whether the character range is
in the template or in the latter pool. The first letter in the range is
used to decide this, thus entering "[A-z]" is equivalent to entering "[A-Z]",
and indicates a template character.
<p><b>Special Pattern Characters</b>
<p>Patterns can also have some special characters. Each has an "upper case"
(or anchored) and a "lower case" (or floating) form, analogous to letters.
The special characters are:
<br>&nbsp;
<table BORDER COLS=3 WIDTH="60%" >
<tr>
<td>
<center><b>MEANING</b></center>
</td>

<td>
<center><b>ANCHORED (TEMPLATE)</b></center>
</td>

<td>
<center><b>FLOATING</b>
<br><b>(LETTER POOL)</b></center>
</td>
</tr>

<tr>
<td>
<center>Any letter</center>
</td>

<td>
<center>:</center>
</td>

<td>
<center>.</center>
</td>
</tr>

<tr>
<td>
<center>Any vowel</center>
</td>

<td>
<center>*</center>
</td>

<td>
<center>+</center>
</td>
</tr>

<tr>
<td>
<center>Any consonant</center>
</td>

<td>
<center>=</center>
</td>

<td>
<center>-</center>
</td>
</tr>
</table>

<p>The patterns above ("T.....D" and "T:::::D") are effectively equivalent,
but this need not always be the case. For example, "Ta....D" and "Ta::::D"
are not the same; in the former the `a' can be used in any of the five
central positions, and the character in the second position can be any
legitimate character, while in the latter case the `a', even though lower
case, must occur in the second position, as all other&nbsp; positions are
in upper case and thus locked in place.
<p>You cannot use these special characters within a range (thus for example,
"[*y]" is not valid).
<p>There are shortcut buttons in the Template form for entering these characters.
The shortcut buttons are labeled "Any", "Vowel" and "Consonant", but will
insert the single corresponding character into the pattern when pressed.
The actual character entered will depend on whether the program is in "anchored"
mode or "floating" mode.
<p><b>Multi-Word Patterns</b>
<p>You can select multi-word matching in either of two ways: by checking
the Multi checkbox on the main screen, or by explicitly specifying where
word breaks should be by using the character "|" within your pattern. The
former method is useful when you don't care where the word breaks occur;
for example, when trying to find all multi-word anagrams. The latter method
is useful when the word breaks must be in known locations in the position
template. For example,&nbsp; if you have a crossword clue that consists
of a 3 letter word followed by a 4 letter word, and you think this is an
anagram of teacher, you could use the pattern "tea|cher".
<p>Be warned that multi-word anagram matching can be very time consuming,
especially using the checkbox approach!
<p><b>Using Variables (WordFindPro only)</b>
<p>You can use the numbers 1 through 26 to represent letters. This is mostly
useful for a certain type of crossword puzzle often called a <i>codeword</i>
, due to its relationship with simple secret codes (namely substitution
ciphers). A codeword usually has no clues in the usual crossword sense,
but instead each empty square in the grid is labeled with a number from
1 through 26. Each number corresponds to exactly one letter, and this correspondence
holds true throughout the grid. For example,&nbsp; if the number 7 represents
the letter G in a particular square, then all squares in the grid&nbsp;
labeled with a 7 can be filled in with G's.
<p>A single word example may be `1 2 2 1 3'. This pattern would match words
such as ABBAS, ALLAY, TOOTH and TEETH. To enter such a pattern in WordFind++,
you must separate the numbers with spaces (there is a shortcut button for
this). You can also specify a constraint&nbsp; on a variable by separating
it from the number with a slash character. For example:
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1/[AEIOU] 2 2 1 3
<p>&nbsp;is the same pattern as before except that the variable `1' must
be a vowel.
<p>All numeric variables are considered anchored; WordFind does not yet
support floating variables. If you specify a floating constraint (such
as a lower case letter) it will be treated as the equivalent anchored constraint.
<p>WordFind will remember the possible assignments of letters to variables
between searches and use these to constrain further searches. This is useful
to maintain consistent constraints while matching different words in the
grid. Be warned, however - this process can eliminate more than you would
like, particularly if the word on the grid happens to not be in the WordFind
dictionary you are using. Interrupting the search is another way in which
the constraints can be improperly computed, and thus WordFind only records
the constraints from a match after you have stepped through all the possible
matches in the Word Form.
<p>You can discard the current constraints and start afresh at any stage
selecting Reset Constraints from the Edit menu in the Template form, or
by pressing the Rst button in the Variables form (see below for more about
these).
<p>As you become confident about the associations between the numbers and
the letters in the grid you can start using variable assignments. Assignments
differ from constraints in that they are made explicitly by the user, are
reset separately, and must be of a single letter to a variable (whereas
the constraints are of character ranges that can match the variables).
To assign a letter to a variable, you need to tap on the variable in the
Variable form. That pops up the Variable Assignment dialog. You can clear
all variable assignments by pressing Clr in the Variable form or by selecting
Clear Assignments from the Edit menu in the Template form.
<p><font size=+1>3.3.3 Word Length and Count Constraints</font>
<p>You can specify minimum and maximum word lengths for prefix, and suffix,
and the minimum and maximum number of words allowed per match for multi-word
matching. If these are set to the default they will have no effect. They
can be useful when generating multi-word anagrams with patterns that contain
several A's or I's, as WordFind will likely&nbsp; churn out thousands of
patches in these cases starting with the words `A', `AA', and/or `I'. Setting
the minimum length to three (for example) can help prevent this.
<p><font size=+1>3.3.4 A Tip for Multi-Word Anagrams</font>
<p>Quite often there will be thousands of possible anagrams and it becomes
impossible to hunt down the good ones. There is a technique to help in
this case - look through some of the possibilities, and select a word you
think is appropriate in the final anagram. Then subtract this word from
the input, and see what words can be made from the remaining letters. For
example, consider VEGETARIAN. We see that some anagrams have the word RAVE,
and decide to use this. This means we must find anagrams of the remaining
letters, namely GETIAN. We find the word EATING. Thus VEGETARIAN=EATING
RAVE.
<br>&nbsp;
<br>&nbsp;
<p><b><font size=+2>4.The User Interface</font></b>
<p>The Template form is slightly different for each program:
<p><img SRC="main++.jpg" height=160 width=160 align=ABSCENTER> WordFind++
<p><img SRC="mainpro.jpg" height=160 width=160 align=CENTER> WordFindPro
(note the popup trigger for selecting the dictionary).
<p>The Template Form is what you see when you start up the program for
the first time. The various controls are:
<ul>
<li>
Clear - clears the current pattern in the pattern text field</li>

<li>
History - pops up the pattern history list, allowing you to reselect one
of the last ten patterns entered</li>

<li>
Go! - start a search using the current pattern and attributes</li>

<li>
All - touching this pops up a dialog box allowing you to choose whether
to use prefix or suffix matching, or whether all letters must be used</li>

<li>
Multiword - a checkbox which explicitly enables multi-word matches (the
`|' character implicitly enables them)</li>

<li>
Word Lengths - if prefix or suffix matching is selected, touching either
of these pops up a dialog box allowing you to select a range of allowable
word lengths. These constraints also apply if the multi-word match checkbox
is checked. In the remaining cases (All style matching with the multi-word
checkbox not checked) they are ignored and can't be edited.</li>

<li>
Word Counts - similar to the word lengths, these controls can be used to
set a range of acceptable number of words in matches. The controls are
only enabled and only have effect if the multi-word match checkbox is checked.</li>

<li>
Shortcut buttons - there are several shortcut buttons for entering pattern
characters, such as ranges ("[",", "^",&nbsp; "-" and "]"), word breaks
("|"),&nbsp; and variable assignments ("/"). There is also a shortcut button
for the space character, useful for separating variable numbers (spaces
in patterns are otherwise ignored).</li>

<li>
An input mode toggle button, which toggles state between "Anchored" input
mode and "Floating" input mode. When in "anchored" input mode, letter case
shift is enabled (so subsequent letters are entered by default in upper
case), and vice-versa.</li>

<li>
Three shortcut buttons for specific character ranges, namely vowels, consonants,
and any character. These will enter the characters "*", "=", ":" respectively
in anchored input mode, or "+", "-", and ":" respectively in floating input
mode.</li>
</ul>
WordFindPro includes an extra list box trigger, which can be used to pop
up a list of available dictionaries and allow you to choose the one to
use for subsequent searches.
<br>&nbsp;
<p><img SRC="matchtype.jpg" height=160 width=160 align=ABSCENTER> This
is the dialog box for selecting the type of matching to use
<p><img SRC="wordcount.jpg" height=160 width=160 align=ABSCENTER> This
is the dialog for selecting a minimum word count.
<p><img SRC="wordlength.jpg" height=160 width=160 align=ABSCENTER> This
is the dialog for selecting the minimum word length for multi-word matching.
<p>The dialogs for entering the maximum word count and maximum word length
are identical apart from their titles.
<p>After pressing Go! in the Template Form, WordFind will display the matches
found in the Word Form, shown below.
<p><img SRC="word.jpg" height=160 width=160 align=ABSCENTER>&nbsp; The
Word Form, displaying the partial results of a pattern search.
<p>The controls in the Word Form are:
<ul>
<li>
Next - show the next screenfull of matches</li>

<li>
Redo - go back to the last search form to redo the last search</li>

<li>
New - go back to the last search form to start a new search</li>

<li>
Vars - display the current variable constraints and assignments (WordFindPro
only)</li>

<li>
Stop! - while WordFind is busy searching for matches, you can press this
button to abort the search.</li>
</ul>
Tapping on a word in the Word Form will copy that word to the clipboard
so that it can be pasted later in some other application.
<p>If you press the Vars button, the Variable Form will be displayed. This
is shown below:
<br>&nbsp;
<p><img SRC="vars.jpg" BORDER=0 height=160 width=160 align=ABSCENTER> The
Variable Form, showing some computed variable constraints and one assignment
<p>There are three buttons at the top right, namely:
<ul>
<li>
Clr - clear all of the variable assignments and computed constraints</li>

<li>
Rst - reset the currently computed letter constraints (but don't clear
the assignments)</li>

<li>
OK - goes back to the Word form and restarts the search</li>
</ul>
You can assign a value to a variable by tapping on its entry in the list.
This will pop up the Set Variable dialog shown below, from which you can
associate a specific letter with a variable (effectively making it a constant)
or break the association and make the variable variable once more.
<p><img SRC="setvar.jpg" height=160 width=160 align=ABSCENTER> The Set
Variable dialog, with the selected variable currently set to be `R'.
<p>When in a search form, you can access a menu bar with two menus. the
Edit Menu and the Help Menu. The Help Menu has just one selection, namely
`About WordFind. The Edit Menu is shown below:
<p><img SRC="mainmenu.jpg" height=160 width=160 align=CENTER>
<p>Many of these are standard operations for Palm apps for text editing.
The ones specific to WordFind are:
<ul>
<li>
<b>Clear Assignments</b> This clears any numeric variable assignments.
It is equivalent to tapping on "Clr"' in the Variable Form.</li>

<li>
<b>Show Constraints</b> This shows any computed variable constraints by
popping up the Variable Form (equivalent to tapping on the "Vars" button
in the Word Form).</li>

<li>
<b>Reset Constraints </b>This discards any computed numeric variable constraints.
It is equivalent to tapping on "Rst" in the Variable Form.</li>

<li>
<b>Delete Dictionary </b>This allows you to delete dictionary databases
from your device.</li>
</ul>
If you tap on the "<b>Template:</b>" prompt in the Template Form, the program
will switch to one of the other search forms. Iin WordFindPro, you will
get the Regular Expression form. This is similar to the Template Form but
does not include the controls for word length and counts, or match types.
It also has a slightly different set of shortcut buttons:
<p><img SRC="regexp.jpg" height=160 width=160 align=ABSCENTER>
<p>Both WordFind++ and WordFindPro also allow you to switch to the Glob
Form to do glob pattern searches:
<p><img SRC="globpat.jpg" height=160 width=160 align=CENTER>
<br>&nbsp;
<p><b><font size=+1>Using A Keyboard</font></b>
<p>If you have a Palm keyboard, you can make use of some additional key
assignments (you can do this with Graffiti too but its more tedious than
using the buttons on the screen). In the search forms, you can use the
tilde character ~ to recall a history item; just enter a digit from 0 through
9 after the tilde. ~0 recalls the last pattern, ~1 the pattern before that,
and so on.
<p>In the Word Form, the following keys are equivalent to buttons on the
screen:
<ul>
<li>
Newline or PageDown, or the down scroll button on the Palm - equivalent
to tapping the Next button</li>

<li>
'r', 'R' or the up scroll button - equivalent to tapping the Redo button</li>

<li>
'n', 'N', or backspace - equivalent to tapping the New button</li>

<li>
'v' or 'V' - equivalent to tapping the Vars button</li>
</ul>

<p><br><b><font size=+2>5. The Dictionary Manager (WordFindPro Only)</font></b>
<p>WordFindPro includes a command-line utility for MS-Windows systems named
<b>dictmgr.exe</b>.
This program can be used to dump the contents of a .pdb dictionary database
to a word list in an ASCII text file, and to produce .pdb dictionary files
from word lists in ASCII text files.
<p>To dump the words in a dictionary database to the screen, use the form:
<br>&nbsp;
<blockquote><b>dictmgr -d</b> <i>pdbfile</i></blockquote>

<p><br>If you want to send the output to a file, you can use:
<br>&nbsp;
<blockquote><b>dictmgr -d -o </b><i>txtfile pdbfile</i></blockquote>

<p><br>To build a .pdb dictionary from a word list in a text file, use:
<br>&nbsp;
<blockquote><b>dictmgr -n</b><i> name</i> <b>-o</b> <i>pdbfile txtfile</i></blockquote>

<p><br>The name should be a short descriptive name. It must be quoted if
it contains spaces. The input <i>txtfile</i> must have one word per line.
You can specify up to 16 <i>txtfile</i>s on the command line and the word
lists will be merged into a single .pdb file.
<p>You can also do searches with the program, using the form:
<br>&nbsp;
<blockquote><b>dictmgr</b> [<b>-o </b><i>outputfile</i>] [<b>-w </b><i>minwords</i>]
[<b>-W </b><i>maxwords</i>] [<b>-l </b><i>minlength</i>] [<b>-L </b><i>maxlength</i>]
[<b>-Multi</b>] [<b>-t All</b>|<b>Prefix</b>|<b>Suffix|Regexp|GlobPat</b>]
<b>-?</b> <i>pattern&nbsp; pdbfile</i></blockquote>
The various arguments correspond to the various fields and selectors in
the Template Form of the WordFind program. The search type can be abbreviated
to a single letter. Similarly <b>-Multi</b> can be abbreviated to <b>-M</b>.
<p>The following example dumps the words in the large dictionary to an
ASCII text file called words.txt:
<br>&nbsp;
<blockquote><b>dictmgr -d -o words.txt large.pdb</b></blockquote>

<p><br>The next example recreates the large dictionary database from the
dumped word list:
<br>&nbsp;
<blockquote><b>dictmgr -S -n "Large" -o large.pdb words.txt</b></blockquote>

<p><br>Note that building a .pdb file can take quite a while, especially
for large word lists!
<p>The <b>-S</b> flag shown above tells <b>dictmgr</b> that the <b>words.txt</b>
file is already sorted, which makes <b>dictmgr</b> start up faster and
use less memory.
<p>Here is an example of a search, to find all pairs of words of length
4 or 5 characters, that can be made from the letters of the word <i>anonymously</i>
using the medium dictionary (using prefix matching):
<br>&nbsp;
<blockquote><b>dictmgr -w 2 -W 2 -l 4 -L 5 -t P -M -? anonymously medium.pdb</b></blockquote>

<p><br>A version of the dictionary manager is also available for FreeBSD
upon request.
<br>&nbsp;
<p><b><font size=+2>6. Registration</font></b>
<p>WordFind++ and WordFindPro are shareware, and cost US$10 and US$15 respectively.
The trial versions can be used with the demo.pdb dictionary for 21 days
for evaluation purposes. If you continue to use any of the programs after
that, you must pay for them. The full versions can be purchased and downloaded
from PalmGear Headquarters at http://www.palmgear.com. Registered users
get access to other dictionaries, to future updates, and to e-mail support.
<br>&nbsp;
<p><b><font size=+2>7. Disclaimer</font></b>
<p>This software is provided "as is", and the author makes no warranties
as to its fitness for any purpose.
<br>&nbsp;
<p><b><font size=+2>8. Version History</font></b>
<p>Note - I only started keeping track of this with version 1.4;&nbsp;
the rest are as I can remember.
<p><b>Changes in version 1.1</b>
<p>Added the ability to restart the current search.
<p><b>Changes in version 1.2</b>
<p>Added the progress bar.
<p><b>Changes in version 1.3</b>
<p>Added the Stop! button to interrupt searches.
<p>Added the special character shortcut buttons.
<p><b>Changes in version 1.4</b>
<p>Introduced the history feature, and the Clear button,&nbsp; and preserved
the main form settings better between&nbsp; consultations.
<p><b>Changes in version 1.5</b>
<p>Made the main form settings and history persistent, even&nbsp; if you
temporarily switch to another application.
<p>Made the button labels more meaningful.
<p>Fixed some bugs in v1.4.
<p><b>Changes in version 1.6</b>
<p>Added a button shortcut for `-'.
<p>Reduced stack usage; the introduction of the history feature increased
stack usage to such an extent that blowing the stack and crashing the Palm
was possible in 1.4 and 1.5.
<p><b>Changes in version 1.7</b>
<p>Fixed the problem of the pattern field being clobbered by an old value
when changing the mode toggle.
<p>Added support for variables (numeric placeholders).
<p>Added support for `|' as a word separator.
<p>Tidied up some of the screen layout.
<p>Created HTML manual.
<p>Changed the open mode of the dictionary to read-only to support flash
RAM database residency.
<p><b>Changes in version WordFind++ 1.8 / WordFindPro 1.0</b>
<p>Fixed all known reproducible bugs.
<p>Reimplemented variable support to work more intuitively.
<p>Radically reduced stack requirements, moving much of the data that was
previously allocated on the stack to the global variable space.
<p>Added the dictionary maintenance program and split into two products.
<p>Improved the speed of the searches.
<p><b>Changes in WordFind++ 2.1 and WordFindPro 1.1</b>
<p>WordFind++ 1.8 should really have been called WordFind++ 2.0, and so
I'm jumping to 2.1 here which makes it easier to keep in sync with WordFindPro's
version number.
<p><b>dictmgr</b> will now sort the input word lists if necessary, and
no longer requires the word lists to be presorted.
<p>Added a Scrabble (tm) tournament dictionary to those shipped with WordFindPro.
<p>Fixed a bug in the word length handling. If the minimum word length
was set to some positive value but the maximum word length was set to `Any'
then the word length settings didn't have any effect.
<p>Fixed a bug in the drawing of the progress bar.
<p>When you start a new search (by starting the application or tapping
on New in the Word List form), the pattern is now cleared instead of being
set to the last one used.
<p>You can now use a newline in the graffiti area to start a search as
an alternative to tapping on the Go! button.
<p><b>Changes in WordFind++ 2.2 and WordFindPro 1.2 (31 April 2000)</b>
<p>Added the additional key assignments to make it easier to drive WordFind
from a keyboard
<p>Fixed the version number shown in the About form.
<p><b>Changes in WordFind++ 2.3 and WordFindPro 1.3 (June 2000)</b>
<p>Fixed several bugs in the dictmgr program, and speeded it up a little.
<p>The dictmgr program can now be used to do searches as well, which is
much faster than doing them on the Palm device (although not usually as
convenient).
<p>Prefix/suffix matching wasn't working properly if the multi-word checkbox
was enabled; this has been fixed.
<p><b>Changes in WordFind++ 2.4 and WordFindPro 2.4 (March 2001)</b>
<p>Change the names from PalmWordPro/++ to WordFindPro/++ to avoid trademark
and copyright issues with Palm, Inc.
<p>Updated the WordFindPro version number to 2.4, so that the two programs
are consistent, to reduce confusion over which is more recent.
<p>Added support for regular expressions to WordFindPro.
<p>Improved error handling; syntax errors in search patterns are now reported
as such, whereas before they would be reported as `no dictionary loaded'.
<p>When WordFindPro is started, it will show the name of the default dictionary,
instead of "Default". It will show "No dictionary" if no dictionary is
loaded, as opposed to "Default".
<p>Variable (numeric) placeholders have been removed from WordFind++.
<p>The memory footprint of the programs has been reduced (although in WordFindPro
this has been offset by the addition of the regular expressions).
<p>Updated to use PalmOS SDK 3.5. Note that the programs now require PalmOS
3.1 or later to run.
<p><b>Changes in WordFind 2.5 (March 2001)</b>
<p>This is a stopgap release addressing some of the most common user requests
I have had, as it is unlikely I will have time for another major release
for quite a while.
<p>Added the Glob Form and the glob pattern searching.
<p>Tapping on "Redo" now takes you back to the search form (without clearing
the pattern field) instead of restarting the search.
<p>Tapping on a word in the Word Form copies it to the clipboard so it
can be pasted later.
<p>Improved the error messages.
<p><b>Changes in WordFind 2.6 (March 2001)</b>
<p>Updated the help info that you see when tapping the (i) in the About
dialog.
<p>Rud van der Ham suggested that if a glob pattern contains no `*' sequences,
then it can be converted to a template, which results in faster matching.
This is now done automatically (thanks Ruud for yet another good suggestion!).
<p>Updated dictmgr.exe to support glob pattern matches.
<p><b>Changes in WordFind 2.7 (May 2001)</b>
<p>Fixed a bug in the handling of template searches with floating elements. This
bug was preventing WordFind from finding all possible matches.
<br>&nbsp;
<p><b><font size=+2>8. Known Bugs/Limitations/Common Problems</font></b>
<p>There are no known bugs in this release (there are some shortcomings,
but that's what progress is all about!)
<p>There are some limitations. Search patterns and regular expressions
are restricted to 63 characters, while words are restricted to 31 characters.
<p>You can have at most 32 floating elements in a template pattern (more
than this and WordFind will probably take forever to find anything anyway).
<p>From questions I get asked by e-mail, I think I should just stress a
few points:
<p>You must load a dictionary .pdb file or WordFind will just show a "No
dictionary!" error when you try to search.
<p>Think of a template search in terms of the two components of letter
pool and word template. Imagine the letter pool as a group of letter tiles,
some of which are like jokers or wildcards, although they may be restricted
to sub-ranges of the alphabet (such as vowels). These tiles have to be
placed into a crossword like template, and some of them may have to be
used in specific positions in that template.
<p>Remember the Floating/Anchored button is just like a Caps Lock button
- it has no effect on characters already entered but sets the letter case
for further input. It is the actual case of the letters as they appear
on the display that determines whether they are fixed in position or floating.
<p>To find all words that start with some known prefix, such as NEO for
example, you would enter a pattern like "NEO::::::::::::" (remember `:'
corresponds to `any letter'). You would select Prefix matching, with a
minimum word length of 3. Similarly, to find words ending with a known
suffix, such as OLOGY, you would enter a pattern like "::::::::::OLOGY",
select Suffix matching, and specify a minimum word length of 5.
<p>To find all the words of up to length N, that can be made from a specific
set of N letters, enter the letters in lower case in the templat form and
select prefix or suffix matching.
<br>&nbsp;
<p><b><font size=+2>9. On the Economics of Shareware</font></b>
<p>I occasionally get mail from people complaining that these programs
are "too expensive". I also occasionally get mail from people who want
to write shareware for the Palm platform asking me whether there is any
money in it. The following comments may be of interest to both these groups.
<p>Writing Palm applications involves a reasonable learning curve. Even
once you know the APIs and the platform fairly well, it can be a frustrating
experience. Many of the API routines do not check arguments, and passing
bad arguments through can cause crashes at a later stage, so debugging
can be a tedious and time consuming process.
<p>I have not kept track of how much time I have spent on writing these
programs, but I think that three months of full-time work is a reasonable
estimate. My income from these programs has over the past year and a half
has been approximately $2000. That is gross income. Once that is adjusted
for income tax, and the cost of the development tools, it is closer to
$1000. Which works out to about $20 per day of work.
<p>This is certainly no way to make a living. If it wasn't for the fact
that I use these programs myself, there is no way I could justify the amount
of time I have spent developing them. Certainly the time spent on them
is time I could have spent on pursuits that may have had much better payoffs,
whether that be doing consulting work, or spending more time with my wife.
<p>I think it may be possible to make a living writing programs for the
Palm platform, but these would need to be for vertical markets and would
have to be charged for based on contract programming rates. Alternatively,
the program would have to have mass-market appeal, although even then it
is questionable whether the work would pay for itself.
<p>To those people who complain about the cost of the programs, I can simply
say if you think they are too expensive, don't buy them. These programs
are cheap - given the time spent on them, and the income generated from
them, I am almost giving them away. It doesn't surprise me at all to see
some people trying to charge up to $50 for Palm programs. That is the only
way they will be able to recover their investment of time.
<p>For those people who are considering writing shareware, be warned that
you are very unlikely to make much money this way. But by all means go
ahead anyway - you can get a lot of satisfaction from writing Palm programs.
<p>On a more technical note, WordFind was written in C++, using a simple
application framework built on top of PalmOS. I am currently documenting
this framework, and will be submitting the code and the documentation to
Dr Dobb's Journal, for possible publication late in 2001. The editors of
DDJ have expressed lots of interest in this, so I think that the likelihood
of publication is very good. People who may be interested in programming
the Palm devices should keep an eye out for this article and code; I am
sure it will greatly accelerate their learning curve.
<br>&nbsp;
<p><b><font size=+2>10. Contacting the Author</font></b>
<p>I am always interested to hear bug reports, feature requests, and of
novel uses for WordFind (such as using it to solve puzzles in computer
adventure games, substitution ciphers, and so on. Please mail any comments
to <i>gram@bradygirl.com</i>
<p>I am also interested in (non-copyrighted) word lists and dictionaries
in other language, provided they use the 26 letter latin alphabet .Thus
far, Ruud van der Ham has contributed two Dutch dictionaries to me (as
well as some useful ideas for shortcuts in WordFind 2.1 and 2.2). Claude
Sabatier has contributed a French dictionary, and a dictionary of proper
names in French and English. These dictionaries can be downloaded from
the website by registered users.
<p><i>Enjoy using WordFind!</i>
<br>&nbsp;
</body>
</html>
