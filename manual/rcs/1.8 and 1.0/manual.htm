<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Graham Wheeler">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (Win95; I) [Netscape]">
   <title>manual</title>
</head>
<body>

<center><b><font size=+3>PalmWord++ v1.8 and PalmWordPro v1.0</font></b>
<br><font size=+2>by Graham Wheeler</font>
<br><i>gramster@bigfoot.com</i></center>

<p><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<p><b><font size=+2>1. Introduction</font></b>
<p>PalmWord++ and PalmWordPro are powerful dictionary searching programs
for use with word games line Scrabble, Target and crosswords. You can use
them to generate lists of anagrams and words, given a set of constraints
on the available letters and their positions.
<p>PalmWordPro has all of the functionality of PalmWord++, plus the ability
to have multiple dictionaries resident at the same time, and switch between
them freely. PalmWordPro also includes a Win32 dictionary maintenance program
(FreeBSD or Linux executables available to registered users upon request)..
<p>To use PalmWord++, you must also install one of the dictionary databases
it comes with for it to search. To use PalmWordPro, you must install <i>at
least </i>one of the dictionary databases it comes with.
<p>The currently available dictionaries are:
<p><b>demo.pdb</b> - the dictionary that comes with the trial versions
of PalmWord++ and PalmWordPro, this has 28,524 words, of up to 6 letters
in length.
<p><b>ospd3.pdb</b> - for Scrabble players, this dictionary is made from
the OSPD3 word list of&nbsp; 116,887 words of up to 13 characters in length.
<p><b>small.pdb</b> - a crossword dictionary of 53,975 common words of
up to 13 characters in length.
<p><b>medium.pdb</b> - a medium-sized crossword dictionary of 124,228 words
of up to 13 characters in length.
<p><b>large.pdb</b> - this large crossword dictionary has 227,238 words
of up to 15 letters in length.
<p><b>huge.pdb</b> - this very large dictionary has 341,907 entries of
up to 15 letters in length.
<p>The trial versions may be used with the <b>demo.pdb</b> dictionary only.
Unauthorised redistribution of the other dictionary database files is not
permitted.
<p>In the rest of this documenty, we will refer to PalmWord++ most of the
time - this applies to both programs. We refer to PalmWordPro only when
dicussing the additional features of PalmWordPro.
<br>&nbsp;
<p><b><font size=+2>2. Quick Start</font></b>
<p>Section 3 provides a detailed description of how to use the programs.
This section provides a quick introduction which will allow you to do the
most common types of searches.
<p><b><font size=+1>General Crossword Help</font></b>
<p>For help with a crossword word, where only some letters are known:
<ul>
<li>
make sure the button at the bottom right is set to "Anchored"</li>

<li>
enter the word or words in the pattern field. For positions where the lettter
is unknown, press the "Any" button, which will insert a ":" character at
that position. For multi-word clues, use the "|" character to mark the
end of one word and start of the next (there is a shortcut button for this
character on the screen)</li>

<li>
press the "Go!" button to start the search</li>
</ul>
<b><font size=+1>Finding Anagrams</font></b>
<p>The procedure for finding anagrams is identical to the above, except
that you should&nbsp; ensure that the button at the bottom right of the
Main form is set to "Floating" instead of "Anchored" before you enter the
word(s) that you want to find anagrams of..
<p>For multi-word anagrams, check the Multi checkbox before starting the
search (if the word breaks can occur anywhere) or use the "|" character
as before to mark specific positions as word breaks (as in a crossword
anagram clue). For example, if you had a crossword
<br>clue "Wicked television arrangement (4,3,3)" which you guessed was
an anagram of "television", you could enter "tele|vis|ion" to find all
possible matches.
<p><b><font size=+1>What's Missing in this Quick Start</font></b>
<p>Anagram hunting and crossword clue assistance are the most common uses
of PalmWord++, and you don't need to know much more than this to get lots
of benefit from the program. However, PalmWord++ supports far more complicated
types of searching than this, including the ability to search for words
with known prefixes and suffixes (such as words beginning with `post'-
or words ending in `-tion'), and the ability to use numeric placeholders
(variables) to specify letters; this is useful in the type of crossword
known as a codeword, where each square is labelled with a number from 1
through 26 corresponding to a letter, and no clues are given. If you need
this sort of functionality, you should read and understand the next section.
<br>&nbsp;
<p><b><font size=+2>3. Detailed Description</font></b>
<p>The method usedby PalmWord++ for searching&nbsp; is fairly complex but
worth understanding if you want to make full use of it. Underlying each
search are two pieces of information:
<ul>
<li>
&nbsp;a position template which specifies which letters are allowed in
which positions in matching words.</li>

<li>
a letter pool, which specifies which letters or letter ranges are available
for use in positionally unconstrained entries in the template.</li>
</ul>
A few examples can be used to illustrate the idea:
<ul>
<li>
for the literal word ROPE the template is "ROPE" and the&nbsp; letter pool
is empty;</li>

<li>
for anagrams of ROPE the&nbsp; template is unconstrained (we&nbsp; will
write this as "####") and the letter pool consists&nbsp; of the letters
R, O, P and E;</li>

<li>
for anagrams of ROPE that begin with R and have P in the third place the
template is "R#P#" and the letter pool consists of an O and an E.</li>
</ul>
Given a template and a letter pool, PalmWord++ tries to find matches by
plugging different letters from the letter pool into different positions
in the template.
<p><b><font size=+1>Match Types</font></b>
<p>In the Main form, you can choose what type of match to use. There are
three possibilities, and each possibility can also be used in either single
word or multi-word mode:
<ul>
<li>
Use all letters - matches must match the whole word template and use all
the letters from the pool;</li>

<li>
Match prefixes - matches may match any leading subsection of the template;</li>

<li>
Match suffixes - matches may match any trailing subsection of the&nbsp;
template;</li>
</ul>
The prefix and suffix matches can be illustrated by continuing with our
last example. That is, we have template "R#P#" and letter pool "O,E". Using
prefix matching, PalmWord++ would find words that match any of the following
situations:
<br>&nbsp;
<table BORDER COLS=2 WIDTH="50%" >
<tr>
<td>
<center><b>TEMPLATE</b></center>
</td>

<td>
<center><b>LETTER POOL</b></center>
</td>
</tr>

<tr>
<td>
<center>R</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>R#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>R#P</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>R#P#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>
</table>

<p>Using suffix matching, PalmWord++ would instead find matches of:
<br>&nbsp;
<table BORDER COLS=2 WIDTH="50%" >
<tr>
<td>
<center><b>&nbsp;TEMPLATE</b></center>
</td>

<td>
<center><b>LETTTER POOL</b></center>
</td>
</tr>

<tr>
<td>
<center>#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>P#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>#P#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>

<tr>
<td>
<center>R#P#</center>
</td>

<td>
<center>OE</center>
</td>
</tr>
</table>

<p>Thus with prefix matching, PalmWord++ will see if any of the following
are valid words:
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R&nbsp;&nbsp;&nbsp; RO&nbsp;&nbsp; RE&nbsp;&nbsp;
ROP&nbsp;&nbsp; REP&nbsp;&nbsp; ROPE&nbsp;&nbsp; REPO
<p>while with suffix matching, it will check:
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; O&nbsp;&nbsp;&nbsp; E&nbsp;&nbsp;&nbsp;
PO&nbsp;&nbsp; PE&nbsp;&nbsp;&nbsp; OPE&nbsp;&nbsp; EPO&nbsp;&nbsp;&nbsp;
ROPE&nbsp;&nbsp;&nbsp; REPO
<p>Actually, this is not strictly true. Because the letter pool can contain
wildcards and letter ranges as well as specific letters, if PalmWord++
were to consider every possible permutation, some searches would take infinitely
long (effectively, anyway), due to the exponential explosiion in the number
of possible arrangements. Instead, PalmWord++ walks through the dictionary,
and checks which words in the dictionary can correspond to the template
and letter pool. This can make some searches much slower, but does mean
that there is a finite and not too large number of matches that must be
done, and thus it is guaranteed to find all matches within a reasonable
space of time. Of course, this is mainly true for single words - once you
start searching for multi-word matches there is once again an explosion
of possibilities, that even an efficient algorithm can choke on. Fortunately,
if a search is taking too long for your liking, you can abort it at any
time by pressing the Stop button in the Word form.
<p>Note that in the case that the template is unconstrained (that is, all
#'s), then prefix and suffix matching are identical, both having the meaning
"words consisting of one or more letters from the pool".
<p>If you didn't understand the last paragraph, reread the whole last section.
<p><b><font size=+1>Specifying Search Patterns</font></b>
<p>When making consultations, you don't explicitly specify the template
and letter pool as two separate pieces of information. Rather, you specify
a single pattern, which PalmWord++ can split into a template and pool.
<p>In the simplest case a pattern is a sequence of letters (whitespace
may be present but is ignored). The letters may be either upper case or
lower case, the former meaning that the letter must occur in that position
(i.e.the letter&nbsp; is a template constraint), while lower case means
the letter need not be in that position (i.e. it is a letter in the letter
pool). Thus our example above could be specified as "RoPe", or equivalently
as "RePo".
<p>A few more examples should help here. It should be clear by now that
the order of lettters in the template is fixed and significant, while the
order of letters in the pool is arbirtrary.
<br>&nbsp;
<table BORDER COLS=3 WIDTH="59%" >
<tr>
<td>
<center><b>PATTERN</b></center>
</td>

<td>
<center><b>TEMPLATE</b></center>
</td>

<td>
<center><b>LETTER POOL</b></center>
</td>
</tr>

<tr>
<td>
<center>informatION</center>
</td>

<td>
<center>#######ION</center>
</td>

<td>
<center>informat</center>
</td>
</tr>

<tr>
<td>
<center>MISinformed</center>
</td>

<td>
<center>MIS########</center>
</td>

<td>
<center>informed</center>
</td>
</tr>

<tr>
<td>
<center>TreateD</center>
</td>

<td>
<center>T#####D</center>
</td>

<td>
<center>reate</center>
</td>
</tr>

<tr>
<td>
<center>T.....D</center>
</td>

<td>
<center>T#####D</center>
</td>

<td>
<center>any 5 letters</center>
</td>
</tr>

<tr>
<td>
<center>T:::::D</center>
</td>

<td>
<center>T-----D</center>
</td>

<td>
<center>empty</center>
</td>
</tr>
</table>

<p>The first two are typical examples of patterns that would be used for
suffix and prefix matching, respectively. The third is typical of a crossword
situation where the first and last letters are known, and it is suspected
that the word is an anagram of `treated'. The last two cases are a similar
crossword lookup, with two known letters only (see below for a further
explanation of these last two patterns).
<p>Elements in the pattern that correspond to elements in the template
are called "anchored", while elements in the pattern that go in the letter
pool are called "floating".&nbsp; During pattern input PalmWord++ is either
in "floating" mode (in which case letters are entered in lower case by
default) or "anchored" mode (in which case letters are entered in upper
case by default). A button on the Main form toggles between these two modes.
<i>Note
that the button only affects the default letter case of subsequently entered
letters; it does NOT affect the actual search. If a letter appears in upper
case in the pattern it is anchored, irrespective of the current setting
of the input mode button, and similarly for lower case floating characters.</i>
<br>&nbsp;
<p><b>Letter Ranges</b>
<p>Patterns can also have `letter ranges' enclosed in brackets, such as
`[A-Z]' (any letter), `[AEIOU]' (any one vowel) or `[A-MZ]' (any one of
A through M, or Z). To specify the opposite of a range, start the range
with an exclamation mark or caret. For example, [!AEIOU] matches any non-vowel.
The&nbsp; case of the first letter in the range determines whether the
range will be used as a word template constraint or as a letter pool entry;
other than this letter case is ignored. Thus, for example, "[a-Z]" is legitimate
and equivalent to "[a-z]". Similarly "[A-z]" is equivalent to "[A-Z]".
<p>PalmWord++ will allow you to use any type of brackets, and mix different
types of brackets (thus "{a-z)" is acceptable and equivalent to "[a-z]").
<p>There are shortcut buttons on the Main form for entering the left and
right brackets, minus sign, and caret for negating character ranges.
<br>Section 4 describes the user interface of PalmWord++ in some detail.
<p><b>Special Pattern Characters</b>
<p>Patterns can also have some special characters. Each has an "upper case"
(or anchored) and a "lower case" (or floating) form, analogous to letters.
The special characters are:
<br>&nbsp;
<table BORDER COLS=3 WIDTH="60%" >
<tr>
<td>
<center><b>MEANING</b></center>
</td>

<td>
<center><b>ANCHORED (TEMPLATE)</b></center>
</td>

<td>
<center><b>FLOATING</b>
<br><b>(LETTER POOL)</b></center>
</td>
</tr>

<tr>
<td>
<center>Any letter</center>
</td>

<td>
<center>:</center>
</td>

<td>
<center>.</center>
</td>
</tr>

<tr>
<td>
<center>Any vowel</center>
</td>

<td>
<center>*</center>
</td>

<td>
<center>+</center>
</td>
</tr>

<tr>
<td>
<center>Any consonant</center>
</td>

<td>
<center>=</center>
</td>

<td>
<center>-</center>
</td>
</tr>
</table>

<p>The patterns above ("T.....D" and "T:::::D") are effectively equivalent,
but this need not always be the case. For example, "Ta....D" and "Ta::::D"
are not the same; in the former the `a' can be used in any of the five
central positions, and the character in the second position can be any
legitimate character, while in the latter case the `a', even though lower
case, must occur in the second position, as all other&nbsp; positions are
in upper case and thus locked in place.
<p>You cannot use these special characters within a range (thus for example,
"[*y]" is not valid).
<br>There are shortcut buttons in the Main form for enteriing these characters.
The shortcut buttons are labelled "Any", "Vowel" and "Consonant", but will
insert the single corresponding character into the pattern when pressed.
The actual character entered will depend on whether the program is in "anchored"
mode or "floating" mode.
<p><b>Multi-Word Patterns</b>
<p>You can select multi-word matching in either of two ways: by checking
the Multi checkbox on the main screen, or by explicitly specifying where
word breaks should be by using the character "|" within your pattern. The
former method is useful when you don't care where the word breaks occur;
for example, when trying to find all multi-word anagrams. The latter method
is useful when the word breaks must be in known locations in the position
template. For example,&nbsp; if you have a crossword clue that consists
of a 3 letter word followed by a 4 letter word, and you think this is an
anagram of teacher, you could use the pattern "tea|cher".
<p>Be warned that multi-word anagram matching can be very time consuming,
especially using the checkbox approach!
<p><b>Using Variables</b>
<p>You can use the numbers 1 through 26 to represent letters. This is mostly
useful for a certain type of crossword puzzle often called a <i>codeword</i>
, due to its relationship with simple secret codes (namely substitution
ciphers). A codeword usually has no clues in the usual crossword sense,
but instead each empty square in the grid is labelled with a number from
1 through 26. Each number corresponds to exactly one letter, and this correspondence
holds true throughout the grid. For example,&nbsp; if the number 7 represents
the letter G in a particular square, then all squaresin the grid&nbsp;
labelled with a 7 can be filled in with G's.
<p>A single word example may be `1 2 2 1 3'. This pattern would match words
such as ABBAS, ALLAY, TOOTH and TEETH. To enter such a pattern in PalmWord++,
you must separate the numbers with spaces (there is a shortcut button for
this). You can also specify a constraint&nbsp; on a variable by separating
it from the number with a slash character. For example:
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1/[AEIOU] 2 2 1 3
<p>&nbsp;is the same pattern as before except that the variable `1' must
be a vowel.
<p>All numeric variables are considered anchored; PalmWord++ does not yet
support floating variables. If you specify a floating constraint (such
as a lower case letter) it will be treated as the equivalent anchored constraint.
<p>PalmWord++ will remember the possible assignments of letters to variables
between searches and use these to constrain further searches. This is useful
to maintain consistent constraints while matching different words in the
grid. Be warned, however - this process can eliminate more than you would
like, particularly if the word on the grid happens to not be in the PalmWord++
dictionary you are using. Interrupting the search is another way in which
the contraints can be improperly computed, and thus PalmWord++ only records
the contraints from a match after you have stepped through all the possible
matches in the Word Form.
<p>You can discard the current constraints and start afresh at any stage
selecting Reset Constraints from the Edit menu in the Main form, or by
pressing the Rst button in the Variables form (see below for more about
these).
<p>As you become confident about the associations between the numbers and
the letters in the grid you can start using variable assignments. Assignments
differ from constraints in that they are made explicitly by the user, are
reset separately, and must be of a single letter to a variable (whereas
the constraints are of character ranges that can match the variables).
To assign a letter to a variable, you need to tap on the variable in the
Variable form. That pops up the Variable Assignment dialog. You can clear
all variable assignments by pressing Clr in the Variable form or by selecting
Clear Assignments from the Edit menu in the Main form.
<br>&nbsp;
<p><b><font size=+1>Word Length and Count Constraints</font></b>
<p>You can specify minimum and maximum word lengths for prefix, and suffix,
and the minimum and maximum number of words allowed
<br>per match for multi-word matching. If these are set to the default
they will have no effect. They can be useful when generating multi-word
<br>anagrams with patterns that contain several A's or I's, as PalmWord++
will likely&nbsp; churn out thousands of matches in these cases starting
<br>with the words `A', `AA', and/or `I'. Setting the minimum length to
three (for example) can help prevent this.
<p><b><font size=+1>A Tip for Multi-Word Anagrams</font></b>
<p>Quite often there will be thousands of possible anagrams and it becomes
impossible to hunt down the good ones. There is a
<br>technique to help in this case - look through some of the possibilities,
and select a word you think is appropriate in the final anagram.
<br>Then subtract this word from the input, and see what words can be made
from the remaining letters. For example, consider
<br>VEGETARIAN. We see that some anagrams have the word RAVE, and decide
to use this. This means we must find anagrams of the remaining letters,
namely GETIAN. We find the word EATING. Thus VEGETARIAN=EATING RAVE.
<br>&nbsp;
<p><b><font size=+2>4.The User Interface</font></b>
<p><img SRC="main++.JPG" height=160 width=160 align=ABSCENTER> The Main
Form in PalmWord++
<p><img SRC="mainpro.JPG" height=160 width=160 align=CENTER> The Main Form
in PalmWordPro (note the popup trigger for selecting the dictionary).
<p>The Main Form is what you see when you start up the program. The various
controls are:
<ul>
<li>
Clear - clears the current pattern in the pattern text field</li>

<li>
History - pops up the pattern history list, allowing you to reselect one
of the last ten patterns entered</li>

<li>
Go! - start a search using the current pattern and attributes</li>

<li>
All - touching this pops up a dialog box allowing you to choose whether
to use prefix or suffix matching, or whether all letters must be used</li>

<li>
Multiword - a checkbox which explicitly enables multi-word matches (the
`|' character implicitly enables them)</li>

<li>
Word Lengths - if prefix or suffix matching is selected, touching either
of these pops up a dialog box allowing you to select a range of allowable
word lengths. These constraints also apply if the multi-word match checkbox
is checked. In the remaining cases (All style matching with the multi-word
checkbox not checked) they are ignored and can't be edited.</li>

<li>
Word Counts - similar to the word lengths, these controls can be used to
set a range of acceptable number of words in matches. The controls are
only enabled and only have effect ifthe multi-word match checkbox is checked.</li>

<li>
Shortcut buttons - there are several shortcut buttons for entering pattern
characters, such as ranges ("[",", "^",&nbsp; "-" and "]"), word breaks
("|"),&nbsp; and variable assignments ("/"). There is also a shortcut button
for the space character, useful for separating variable numbers (spaces
in patterns are otherwise ignored).</li>

<li>
An input mode toggle button, which toggles state between "Anchored" input
mode and "Floating" input mode. When in "anchored" input mode, letter case
shift is enabled (so subsequent letters are entered by default in upper
case), and vice-versa.</li>

<li>
Three shortcut buttons for specific character ranges, namely vowels, consonants,
and any character. These will enter the characters "*", "=", ":" respectively
in anchored input mode, or "+", "-", and ":" respectively in floating input
mode.</li>
</ul>
PalmWordPro includes an extra list box trigger, which can be used to pop
up a list of available dictionaries and allow you to choose the one to
use for subsequent searches.
<br>&nbsp;
<p><img SRC="matchtype.JPG" height=160 width=160 align=ABSCENTER> This
is the dialog box for selecting the type of matching to use
<p><img SRC="wordcount.JPG" height=160 width=160 align=ABSCENTER> This
is the dialog for selecting a minimum word count.
<p><img SRC="wordlength.JPG" height=160 width=160 align=ABSCENTER> This
is the dialog for selecting the minimum word length for multi-word matching.
<p>The dialogs for entering the maximum word count and maximum word length
are identical apart from their titles.
<p>After pressing Go! in the Main Form, PalmWord++ will display the matches
found in the Word Form, shown below.
<p><img SRC="word.JPG" height=160 width=160 align=ABSCENTER>&nbsp; The
Word Form, displaying the partial results of a pattern search.
<p>The controls in the Word Form are:
<ul>
<li>
Next - show the next screenfull of matches</li>

<li>
Redo - start displaying the matches again from the first screen</li>

<li>
New - go back to the Main Form to start a new search</li>

<li>
Vars - display the current variable constrainst and assignments</li>

<li>
Stop! - while PalmWord++ is busy searching for matches, you can press this
button to abort the search.</li>
</ul>
If you press the Vars button, the Variable Form will be displayed. This
is shown below:
<br>&nbsp;
<p><img SRC="vars.JPG" BORDER=0 height=160 width=160 align=ABSCENTER> The
Variable Form, showing some computed variable constraints and one assignment
<p>There are three buttons at the top right, namely:
<ul>
<li>
Clr - clear all of the variable assignments and computed constraints</li>

<li>
Rst - reset the currently computed letter constraints (but don't clear
the assignments)</li>

<li>
OK - goes back to the Word form and restarts the search</li>
</ul>
You can assign a value to a variable by tapping on its entry in the list.
This will pop up the Set Variable dialog shown below, from which you can
associate a specific letter with a variable (effectively making it a constant)
or break the association and make the variable variable once more.
<p><img SRC="setvar.JPG" height=160 width=160 align=ABSCENTER> The Set
Variable dialog, with the selected variable currently set to be `B'.
<p>When in the Main Form, you can access a menu bar with two menus. the
Edit Menu and the Help Menu. The Help Menu has just one selection, namely
`About PalmWord++. The Main Menu is shown below:
<p><img SRC="mainmenu.JPG" height=160 width=160 align=CENTER>
<p>Many of these are standard operations for PalmPilot apps for text editing.
The ones specific to PalmWord++ are:
<br>&nbsp;
<ul>
<li>
<b>Clear Assignments</b> This clears any numeric variable assignments.
It is equivalent to tapping on "Clr"' in the Variable Form.</li>

<li>
<b>Show Constraints</b> This shows any computed variable constraints by
popping up the Variable Form (equivalent to tapping on the "Vars" button
in the Word Form).</li>

<li>
<b>Reset Constraints </b>This discards any computed numeric variable constraints.
It is equivalent to tapping on "Rst" in the Variable Form.</li>

<li>
<b>Delete Dictionary </b>This allows you to delete dictionary databases
from your device.</li>
</ul>

<p><br><b><font size=+2>5. The Dictionary Manager (PalmWordPro Only)</font></b>
<p>PalmWordPro includes a command-line utility for MS-Windows systems named
dictmgr.exe. This program can be used to dump the contents of a .pdb dictionary
database to a word list in an ASCII text file, and to produce .pdb dictionary
files from word lists in ASCII text files.
<p>To list the wors in a dictionary, use the form:
<br>&nbsp;
<blockquote><b>dictmgr -l</b> <i>pdbfile</i></blockquote>

<p><br>If you want to send the output to a file, you can use:
<br>&nbsp;
<blockquote><b>dictmgr -l -o </b><i>txtfile pdbfile</i></blockquote>

<p><br>To build a .pdb dictionary from a word list in a text file, use:
<br>&nbsp;
<blockquote><b>dictmgr -n</b><i> name</i> <b>-o</b> <i>pdbfile txtfile</i></blockquote>

<p><br>The name should be a short descriptive name. It must be quoted if
it contains spaces. The input txtfile must be sorted (case insensitively)
and have one word per line. You can specify more than one txtfile on the
command line and the word lists will be merged into a single .pdb file.
<p>The following example dumps the words in the large dictionary to an
ASCII text file called words.txt:
<br>&nbsp;
<blockquote><b>dictmgr -l -o words.txt large.pdb</b></blockquote>

<p><br>The next example recreates the large dictionary database from the
dumped word list:
<br>&nbsp;
<blockquote><b>dictmgr -n "Large" -o large.pdb words.txt</b></blockquote>

<p><br>Note that building a .pdb file can take quite a while, especially
for large word lists!
<br>&nbsp;
<p><b><font size=+2>6. Registration</font></b>
<p>PalmWord++ and PalmWordPro are shareware, and cost US$10 and US$15 respectively.
The trial versions can be used with the demo.pdb dictionary for 21 days
for evaluation purposes. If you continue to use either of the programs
after that, you must pay for them. The full versions can be purchased and
downloaded from PalmGear Headquarters at http://www.palmgear.com. Registered
users get access to other dictionaries and to future updates.
<br>&nbsp;
<p><b><font size=+2>7. Disclaimer</font></b>
<p>This software is provided "as is", and the author makes no warranties
as to its fitness for any purpose.
<br>&nbsp;
<p><b><font size=+2>8. Version History</font></b>
<p>Note - I only started keeping track of this with version 1.4;&nbsp;
the rest are as I can remember.
<p><b>Changes in version 1.1</b>
<p>Added the ability to restart the current search.
<p><b>Changes in version 1.2</b>
<p>Added the progress bar.
<p><b>Changes in version 1.3</b>
<p>Added the Stop! button to interrupt searches.
<p>Added the special character shortcut buttons.
<p><b>Changes in version 1.4</b>
<p>Introduced the history feature, and the Clear button,&nbsp; and preserved
the main form settings better between&nbsp; consultations.
<p><b>Changes in version 1.5</b>
<p>Made the main form settings and history persistent, even&nbsp; if you
temporarily switch to another application.
<p>Made the button labels more meaningful.
<p>Fixed some bugs in v1.4.
<p><b>Changes in version 1.6</b>
<p>Added a button shortcurt for `-'.
<p>Reduced stack usage; the introduction of the history feature increased
stack usage to such an extent that blowing the stack and crashing the Palm
was possible in 1.4 and 1.5.
<p><b>Changes in version 1.7</b>
<p>Fixed the problem of the pattern field being clobbered by an old value
when changing the mode toggle.
<p>Added support for variables (numeric placeholders).
<p>Added support for `|' as a word separator.
<p>Tidied up some of the screen layout.
<p>Created HTML manual.
<p>Changed the open mode of the dictionary to read-only to support flash
RAM database residency.
<p><b>Changes in version PalmWord++ 1.8 / PalmWordPro 1.0</b>
<p>Fixed all known reproducible bugs.
<p>Reimplemented variable support to work more intuitively.
<p>Radically reduced stack requirements, moving much of the data that was
previosuly allocated on the stack to the global variable space.
<p>Added the dictionary maintenance program and split into two products.
<p>Improved the speed of the searches.
<br>&nbsp;
<p><b><font size=+2>8. Known Bugs/Common Problems</font></b>
<p><b><font size=+2>9. Contacting the Author</font></b>
<p>I am always interested to hear bug reports, feature requests, and of
novel uses for PalmWord++ (such as using it to solve puzzles in computer
adventure games, substitution ciphers, and so on. Please mail any comments
to <i>gramster@bigfoot.com</i>
<p><i>Enjoy using PalmWord++/PalmWordPro!</i>
<br>&nbsp; 
</body>
</html>
