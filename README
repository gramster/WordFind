Using PalmWord++
================

1. Introduction

PalmWord++ is a powerful dictionary searching program for use with
word games line Scrabble, Target and crosswords. You can use it to
generate lists of anagrams and words, given a set of constraints on
the available letters and their positions.

To use PalmWord, you must also download one of the dictionaries
it comes with for it to search. At present, PalmWord++ only supports
the loading of one dictionary at any one time.

The currently available dictionaries are:

demo.pdb - the dictionary that comes with the trial version of
	PalmWord++, this has about 28,000 words.

ospd3.pdb - for Scrabble players, this dictionary is made from the 
	OSPD3 word list of about 116,000 words.

meddict.pdb - this medium sized dictionary consists of the OSPD3
	word list together with about 23,000 proper nouns.

bigdict.pdb - this large dictionary has over 266,000 entries.

None of the dictionaries have words longer than 13 letters. The
trial version may be used with the demo.pdb dictionary only.
Unauthorised redistribution of the other dictionary database
files is not permitted.



2. Quick Start

Section 3 provides a detailed description of how to use PalmWord++.
This section provides a quick introduction which will allow you
to do the most common types of searches.

2.1 Finding Anagrams

To find anagrams, you should enter the letters in lower case
in the pattern entry area, and then press the Go! button to 
start the search. If you want to use wildcard characters, enter 
a `.' (there is a shortcut button for this on the main screen).

For multi-word anagrams, check the Multi checkbox before starting
the search. You can use the word length and count constraints to
confine the multi-word anagram searching.

2.2 General Crossword Help

For help with a crossword word, where only some letters are known,
enter the pattern in upper case and use `:' to enter the unknown
letters (e.g. `:T:::H'). There is a shortcut button to enter `:',
and there is a Toggle Case button to speed up changing the letter
case (the default is lower-case, as for most Palm applications).

2.3 What's Missing in this Quick Start

Anagram hunting and crossword clue assistance are the most common
uses of PalmWord++, and you don't need to know much more than
this to get lots of benefit from the program. However, PalmWord++ 
supports far more complicated types of searching than this, including
the ability to search for words with known prefixes and suffixes
(such as words beginnining with `post'- or words ending in `-tion').
If you need this sort of functionality, you should read and understand
the next section.

3. Detailed Description

3.1 PalmWord++'s Searching Method

The method used is fairly complex but worth understanding if you
want to make full use of it. Underlying each search are two
pieces of information:

* a word template which specifies which letters are allowed in
	which positions in matching words.

* a letter pool, which specifies which letters or letter ranges are 
	available for use in positionally unconstrained entries
	in the word template.

A few examples can be used to illustrate the idea:

* for the literal word ROPE the word template is "ROPE" and the
	letter pool is empty;

* for anagrams of ROPE the word template is unconstrained (we
	will write this as "####") and the letter pool consists
	of the letters R, O, P and E;

* for anagrams of ROPE that begin with R and have P in the third
	place the word template is "R#P#" and the letter pool 
	consists of an O and an E.

Given a word template and letter pool, PalmWord++ tries to find
matches by plugging different letters from the letter pool into
different positions in the word template.



3.1 Match Types

In the main form, you can choose what type of match to use.
There are three possibilities, and each possibility can also 
be used in either single word or multi-word mode:

* Use all letters - matches must match the whole word template;

* Match prefixes - matches may match any leading subsection of the word
	template;

* Match suffixes - matches may match any trailing subsection of the word
	template;

The prefix and suffix matches can be illustrated by continuing with 
our last example. That is, we have word template "R#P#" and letter
pool "O,E". Using prefix matching, PalmWord++ would find words
that match any of the following situations:

      Word Template        Letter Pool
      ================================
             R                 OE
             R#                OE
             R#P               OE
             R#P#              OE

Using suffix matching, PalmWord++ would instead find matches of:

      Word Template        Letter Pool
      ================================
             #                 OE
             P#                OE
             #P#               OE
             R#P#              OE

Thus with prefix matching, PalmWord++ will see if any of the following
are valid words:

      R    RO   RE   ROP   REP   ROPE   REPO

while with suffix matching, it will check:

      O    E    PO   PE    OPE   EPO    ROPE    REPO

Note that in the case that the word template is unconstrained (that
is, all #'s), then prefix and suffix matching are identical, both
having the meaning "words consisting of one or more letters from the
pool". 

If you didn't understand the last paragraph, reread the whole
section. 


3.2 Specifying Search Patterns

When making consultations, you don't explicitly specify the
word template and letter pool. Rather, you specify a single pattern,
which implicitly specifies the template and pool.

In the simplest case a pattern is a sequence of letters (whitespace
may be present but is ignored). The letters may be either upper case
or lower case, the former meaning that the letter must occur in that
position (i.e. is a word template constraint), while lower case means
the letter need not be in that position (i.e. it is a fixed letter (as
opposed to letter range) in the letter pool). Thus our example above
could be specified as "RoPe", or equivalently as "RePo".

A few more examples should help here:

      Pattern          Word Template    Letter Pool
      =============================================
      informatION      ########ION      informat
      MISinformed      MIS########      informed
      TreateD          T#####D          reate
      T.....D          T#####D		any 5 letters
      T:::::D          T.....D          empty

The first two are typical examples of patterns that would be used
for suffix and prefix matching, respectively. The third is typical
of a crossword situation where the first and last letters are known,
and it is suspected that the word is an anagram of `treated'. The 
last two cases are a similar crossword lookup, with two known letters
only (see below for a further explanation of these patterns).

Note: the on-line help refers to upper-case letters that are fixed in 
position as `anchored' letters, while lower case letters that are
not fixed in position are refered to as `floating' letters. When 
you are entering upper-case letters the program is in `anchored mode'
input, while when entering lower-case letters it is in `floating
mode' input.


Special Pattern Characters
--------------------------

Patterns can also have some special characters. Each has an `upper
case' and a `lower case' form, analagous to letters. The special
characters are:

      Meaning   Upper Case (template)  Lower Case (Pool)
      ==================================================
      Any letter           :                .
      Any vowel            *                +
      Any consonant        =                -

The patterns above ("T.....D" and "T:::::D") are effectively equivalent,
but this need not always be the case. For example, "Ta....D" and 
"Ta::::D" are not the same; in the former the `a' can be used in any of
the five central positions, and the character in the second position
can be any legitimate character, while in the latter case the `a', even
though lower case, must occur in the second position, as all other 
positions are in upper case and thus locked in place.


Letter Ranges
-------------

Patterns can also have `letter ranges' enclosed in brackets,
such as `[A-Z]' (any letter), `[AEIOU]' (any one vowel) or `[A-MZ]' (any 
one of A through M, or Z). To specify the opposite of a range, start
the range with an exclamation mark or caret. For example, [!AEIOU] matches 
any non-vowel. The letter case of the first letter in the range
determines whether the range will be used as a word template
constraint or as a letter pool entry; other than this letter case is
ignored. Thus, for example, "[a-Z]" is legitimate and equivalent to
"[a-z]". Similarly "[A-z]" is equivalent to "[A-Z]". You cannot use
the other special characters within a range (thus for example, "[*y]"
is not valid). PalmWord++ will allow you to use any type of brackets,
and mix different types of brackets (thus "{a-z)" is acceptable and
equivalent to "[a-z]").

There are shortcur buttons on the main screen for entering the left
and right brackets, and for negating character ranges.


3.3 A Tip for Multi-Word Anagrams

Quite often there will be thousands of possible anagrams and it
becomes impossible to hunt down the good ones. There is a
technique to help in this case - look through some of the possibilities,
and select a word you think is appropriate in the final anagram.
Then subtract this word from the input, and see what words
can be made from the remaining letters. For example, consider
VEGETARIAN. We see that some anagrams have the word RAVE, and 
decide to use this. This means we must find anagrams of the remaining
letters, namely GETIAN. We find the word EATING. Thus 
VEGETARIAN=EATING RAVE.



3.4 Word Length and Count Constraints

You can specify minimum and maximum word lengths for prefix,
and suffix, and the minimum and maximum number of words allowed 
per match for multi-word matching. If these are set to the default
they will have no effect. They can be useful when generating multi-word 
anagrams with patterns that contain several A's or I's, as PalmWord++ 
will likely  churn out thousands of matches in these cases starting 
with the words `A', `AA', and/or `I'. Setting the minimum length to 
three (for example) can help prevent this.


4. Registration

PalmWord++ is shareware, and costs US$15. The trial version can be 
used with the demo.pdb dictonary for 21 days for evaluation purposes.
If you continue to use the program after that, you must pay for it. 
The full version can be purchased and downloaded from PalmGear 
Headquarters at http://www.palmgear.com.


5. Disclaimer

This software is provided "as is", and the author makes no warranties
as to its fitness for any purpose.
 
6. Version History

Note - I only started keeping track of this with version 1.4; 
the rest are as I can remember.

Changes in version 1.1

  Added the ability to restart the current search.

Changes in version 1.2

  Added the progress bar.

Changes in version 1.3

  Added the Stop! button to interrupt searches.
  Added the special character shortcut buttons.

Changes in version 1.4

  Introduced the history feature, and the Clear button, 
  and preserved the main form settings better between
  consultations.

Changes in version 1.5

  Made the main form settings and history persistent, even 
  if you temporarily switch to another application.

  Made the button labels more meaningful.

  Fixed some bugs in v1.4.

Changes in 1.6

  Added a button shortcurt for `-'.

  Reduced stack useage; the introduction of the history feature
  increased stack usage to such an extent that blowing the stack and
  crashing the Pilot was possible in 1.4 and 1.5.


7. Future Plans

PalmWord++ is essentially the Consult geature from my MS-Windows
crossword assistant program XWord, part of the WordsWorth
shareware package (available from the Simtel archives in the
win95\edu directory). I hope to eventually implement a more complete
set of features from XWord (which allows you to enter partially
completed crossword grids and uses the interelated constraints to
narrow searches further). Part of the difficulty is doing this
within the constraints of the Palm's low screen resolution. Don't
expect this anytime soon, as I haven't got much further than 
designing a scalable font.

In the shorter term, I aim to make the program support multiple
simultaneously resident dictionary databases, and to allow a
subset to be selected for searching. This is going to require
more memory and CPU power, so it has its drawbacks. The main
advantage is the fact that the dictionary can be split into 
subdictionaries according to word categories. For example, there
could be separate dictionaries for boy's names, girl's names,
place names, technical terms, religion and mythology, etc. This
could help considerably for crosswords where such categories are
known, as is quite often the case.

My long-term dream is to have a crossword `expert system'
which allows you to enter clues and suggests solutions together
with a rationale. Maybe one day...

Please send me feature requests. All reasonable requests will be
considered. But note - requesting that I provide a dictionary which
includes the meanings of words is *not* a reasonable request!
PalmWord++ is designed as a fast pattern matcher, not a dictionary
capable of mapping words one-to-one onto attributes such as a 
meaning. It will never work as that type of dictionary; that would
have to be a separate application. I have had a number of such 
requests so let me try to lay that one to rest here!

